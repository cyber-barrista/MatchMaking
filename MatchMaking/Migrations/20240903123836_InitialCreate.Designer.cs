// <auto-generated />
using System;
using MatchMaking.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MatchMaking.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240903123836_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MatchMaking.Database.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_name");

                    b.Property<long>("PlayerCount")
                        .HasColumnType("bigint")
                        .HasColumnName("player_count");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.HasIndex("GameName")
                        .IsUnique()
                        .HasDatabaseName("ix_games_game_name");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("MatchMaking.Database.Entities.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<int?>("LatencyMs")
                        .HasColumnType("integer")
                        .HasColumnName("latency_ms");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_game_sessions");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_sessions_game_id");

                    b.ToTable("game_sessions", (string)null);
                });

            modelBuilder.Entity("MatchMaking.Database.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_session_id");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.HasIndex("GameSessionId")
                        .HasDatabaseName("ix_players_game_session_id");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("MatchMaking.Database.Entities.PlayerRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid?>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_session_id");

                    b.Property<int>("Latency")
                        .HasColumnType("integer")
                        .HasColumnName("latency");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_player_requests");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_player_requests_game_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_player_requests_player_id");

                    b.ToTable("player_requests", (string)null);
                });

            modelBuilder.Entity("MatchMaking.Database.Entities.GameSession", b =>
                {
                    b.HasOne("MatchMaking.Database.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_sessions_games_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("MatchMaking.Database.Entities.Player", b =>
                {
                    b.HasOne("MatchMaking.Database.Entities.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .HasConstraintName("fk_players_game_sessions_game_session_id");

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("MatchMaking.Database.Entities.PlayerRequest", b =>
                {
                    b.HasOne("MatchMaking.Database.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_requests_games_game_id");

                    b.HasOne("MatchMaking.Database.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_requests_players_player_id");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
